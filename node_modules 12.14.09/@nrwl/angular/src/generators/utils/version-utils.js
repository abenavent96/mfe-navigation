"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstalledPackageVersionInfo = exports.getInstalledAngularVersionInfo = exports.getInstalledAngularMajorVersion = exports.getInstalledAngularVersion = exports.getGeneratorDirectoryForInstalledAngularVersion = void 0;
const devkit_1 = require("@nrwl/devkit");
const semver_1 = require("semver");
const versions_1 = require("../../utils/versions");
function getGeneratorDirectoryForInstalledAngularVersion(tree) {
    var _a;
    const majorAngularVersion = getInstalledAngularMajorVersion(tree);
    const directoryDictionary = {
        14: 'angular-v14',
    };
    return (_a = directoryDictionary[majorAngularVersion]) !== null && _a !== void 0 ? _a : null;
}
exports.getGeneratorDirectoryForInstalledAngularVersion = getGeneratorDirectoryForInstalledAngularVersion;
function getInstalledAngularVersion(tree) {
    var _a, _b;
    const pkgJson = (0, devkit_1.readJson)(tree, 'package.json');
    const installedAngularVersion = pkgJson.dependencies && pkgJson.dependencies['@angular/core'];
    if (!installedAngularVersion ||
        installedAngularVersion === 'latest' ||
        installedAngularVersion === 'next') {
        return (_a = (0, semver_1.clean)(versions_1.angularVersion)) !== null && _a !== void 0 ? _a : (0, semver_1.coerce)(versions_1.angularVersion).version;
    }
    return ((_b = (0, semver_1.clean)(installedAngularVersion)) !== null && _b !== void 0 ? _b : (0, semver_1.coerce)(installedAngularVersion).version);
}
exports.getInstalledAngularVersion = getInstalledAngularVersion;
function getInstalledAngularMajorVersion(tree) {
    return (0, semver_1.major)(getInstalledAngularVersion(tree));
}
exports.getInstalledAngularMajorVersion = getInstalledAngularMajorVersion;
function getInstalledAngularVersionInfo(tree) {
    const installedVersion = getInstalledAngularVersion(tree);
    return {
        version: installedVersion,
        major: (0, semver_1.major)(installedVersion),
    };
}
exports.getInstalledAngularVersionInfo = getInstalledAngularVersionInfo;
function getInstalledPackageVersionInfo(tree, pkgName) {
    var _a, _b, _c;
    try {
        const version = (_b = (_a = (0, devkit_1.readJson)(tree, 'package.json').dependencies) === null || _a === void 0 ? void 0 : _a[pkgName]) !== null && _b !== void 0 ? _b : (_c = (0, devkit_1.readJson)(tree, 'package.json').devDependencies) === null || _c === void 0 ? void 0 : _c[pkgName];
        return { major: (0, semver_1.major)((0, semver_1.coerce)(version)), version };
    }
    catch (_d) {
        return null;
    }
}
exports.getInstalledPackageVersionInfo = getInstalledPackageVersionInfo;
//# sourceMappingURL=version-utils.js.map